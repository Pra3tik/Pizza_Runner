/* Q1. What are the standard ingredients for each pizza? */

WITH CTE AS(
SELECT 
PIZZA_ID,
TRIM(UNNEST(STRING_TO_ARRAY(TOPPINGS,',')))::NUMERIC AS TOPPING
	FROM PIZZA_RECIPES),
	
CTE2 AS(SELECT CTE.PIZZA_ID, P.TOPPING_NAME FROM CTE
INNER JOIN PIZZA_TOPPINGS AS P
ON P.TOPPING_ID = CTE.TOPPING
ORDER BY CTE.PIZZA_ID)

SELECT PIZZA_ID,
STRING_AGG(TOPPING_NAME,',') AS TOPPINGS
FROM CTE2
GROUP BY PIZZA_ID

------------------------------------------------------------------------------------------------
/* Q2. What was the most commonly added extra? */

SELECT TOPPING_ID AS MOST_COMMON, TOPPING_NAME FROM PIZZA_TOPPINGS 
WHERE TOPPING_ID IN(SELECT UNNEST(STRING_TO_ARRAY(EXTRAS,','))::NUMERIC AS UN
				FROM CUSTOMER_ORDERS
				GROUP BY UN
				ORDER BY COUNT(*) DESC
				LIMIT 1)
					  

------------------------------------------------------------------------------------------------
/* Q3. What was the most common exclusion? */

SELECT TOPPING_ID AS MOST_COMMON, TOPPING_NAME FROM PIZZA_TOPPINGS 
WHERE TOPPING_ID IN(SELECT UNNEST(STRING_TO_ARRAY(EXCLUSIONS,','))::NUMERIC AS UN
				FROM CUSTOMER_ORDERS
				GROUP BY UN
				ORDER BY COUNT(*) DESC
				LIMIT 1)

------------------------------------------------------------------------------------------------
/* Q4. Generate an order item for each record in the customers_orders table
in the format of one of the following:
Meat Lovers
Meat Lovers - Exclude Beef
Meat Lovers - Extra Bacon
Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers */

WITH CTE2 AS(
 SELECT
ORDER_ID,
PIZZA_ID,
TRIM(UNNEST(STRING_TO_ARRAY(CO.EXCLUSIONS,','))) AS EXCLUSIONS,
TRIM(UNNEST(STRING_TO_ARRAY(CO.EXTRAS,','))) AS EXTRAS
 FROM CUSTOMER_ORDERS AS CO
UNION 
 SELECT ORDER_ID,PIZZA_ID, EXCLUSIONS,EXTRAS
 FROM CUSTOMER_ORDERS
  WHERE EXCLUSIONS IS NULL AND EXTRAS IS NULL),
  
CTE AS(
SELECT CTE2.ORDER_ID, 
PN.PIZZA_NAME,
STRING_AGG(PT.TOPPING_NAME,', ') AS E1,
STRING_AGG(PT1.TOPPING_NAME,', ') AS E2
FROM CTE2 
JOIN PIZZA_NAMES AS PN ON PN.PIZZA_ID= CTE2.PIZZA_ID
LEFT JOIN PIZZA_TOPPINGS AS PT ON PT.TOPPING_ID = CTE2.EXCLUSIONS::INT
LEFT JOIN PIZZA_TOPPINGS AS PT1 ON PT1.TOPPING_ID = CTE2.EXTRAS::INT
GROUP BY CTE2.ORDER_ID,PN.PIZZA_NAME
	)
SELECT ORDER_ID,
CONCAT(PIZZA_NAME,
CASE WHEN E1 IS NOT NULL THEN ' - Exlcude ' ELSE '' END,E1,
CASE WHEN E2 IS NOT NULL THEN ' - Extra ' ELSE '' END,E2) AS ORDER_LIST
FROM CTE
ORDER BY ORDER_ID
	
	
	
	
	/* OR */
	
	
	
	
	
WITH CTE2 AS(
 SELECT
ORDER_ID,
PIZZA_ID,
TRIM(UNNEST(STRING_TO_ARRAY(CO.EXCLUSIONS,','))) AS EXCLUSIONS,
TRIM(UNNEST(STRING_TO_ARRAY(CO.EXTRAS,','))) AS EXTRAS
 FROM CUSTOMER_ORDERS AS CO
UNION 
 SELECT ORDER_ID,PIZZA_ID, EXCLUSIONS,EXTRAS
 FROM CUSTOMER_ORDERS
  WHERE EXCLUSIONS IS NULL AND EXTRAS IS NULL)
  

SELECT CTE2.ORDER_ID, 
CONCAT(PN.PIZZA_NAME,
CASE WHEN STRING_AGG(PT.TOPPING_NAME,', ') IS NOT NULL THEN ' - Exlcude ' ELSE '' END,
STRING_AGG(PT.TOPPING_NAME,', '),
CASE WHEN STRING_AGG(PT1.TOPPING_NAME,', ') IS NOT NULL THEN ' - Extra ' ELSE '' END,	   
STRING_AGG(PT1.TOPPING_NAME,', ') )
FROM CTE2 
JOIN PIZZA_NAMES AS PN ON PN.PIZZA_ID= CTE2.PIZZA_ID
LEFT JOIN PIZZA_TOPPINGS AS PT ON PT.TOPPING_ID = CTE2.EXCLUSIONS::INT
LEFT JOIN PIZZA_TOPPINGS AS PT1 ON PT1.TOPPING_ID = CTE2.EXTRAS::INT
GROUP BY CTE2.ORDER_ID,PN.PIZZA_NAME	

------------------------------------------------------------------------------------------------
/* Q5. Generate an alphabetically ordered comma separated ingredient list for each pizza order 
from the customer_orders table and add a 2x in front of any relevant ingredients
For example: "Meat Lovers: 2xBacon, Beef, ... , Salami" */

WITH CTE AS(
     SELECT 
     CO.ORDER_ID,PN.PIZZA_NAME,CO.EXCLUSIONS,CO.EXTRAS,PR.TOPPINGS
     FROM CUSTOMER_ORDERS AS CO
      JOIN PIZZA_RECIPES AS PR
      ON PR.PIZZA_ID=CO.PIZZA_ID
      JOIN PIZZA_NAMES AS PN
      ON PN.PIZZA_ID=CO.PIZZA_ID
	   ),
CTE2 AS( /* SUBTRACTION */
     SELECT ORDER_ID,PIZZA_NAME,
      CASE WHEN EXCLUSIONS IS NOT NULL THEN 
       (SELECT ARRAY(
            SELECT DISTINCT UNNEST(string_to_array(TOPPINGS, ','))::int
            EXCEPT
            SELECT DISTINCT UNNEST(string_to_array(EXCLUSIONS, ','))::int
             ) )
          ELSE (SELECT ARRAY(SELECT UNNEST(STRING_TO_ARRAY(TOPPINGS,','))::INT))
      END AS SUB
     FROM CTE
       ),	
CTE3 AS(  /* ADDITION  */
     SELECT ORDER_ID,PIZZA_NAME,
     UNNEST(SUB) AS FINAL_I
     FROM CTE2
      UNION ALL
     SELECT ORDER_ID,PIZZA_NAME, 
     UNNEST(STRING_TO_ARRAY(EXTRAS,','))::INT AS FINAL_I
     FROM CTE
	  ),
CTE4 AS(
     SELECT ORDER_ID, PIZZA_NAME, TOPPING_NAME,
      COUNT(FINAL_I) AS FINAL_COUNT
     FROM CTE3
       INNER JOIN PIZZA_TOPPINGS AS PT
       ON PT.TOPPING_ID= CTE3.FINAL_I
     GROUP BY ORDER_ID,PIZZA_NAME,TOPPING_NAME
     ORDER BY ORDER_ID,TOPPING_NAME
      ),
CTE5 AS(
    SELECT ORDER_ID,PIZZA_NAME,
      CASE WHEN FINAL_COUNT=2 THEN CONCAT('2X',TOPPING_NAME)
           ELSE TOPPING_NAME
      END
    FROM CTE4
      )
SELECT ORDER_ID,
CONCAT(PIZZA_NAME,': ',STRING_AGG(TOPPING_NAME,', '))
FROM CTE5
GROUP BY ORDER_ID,PIZZA_NAME

------------------------------------------------------------------------------------------------
/* Q6. What is the total quantity of each ingredient used in all delivered 
pizzas sorted by most frequent first? */

WITH CTE AS(
     SELECT 
     RN.ORDER_ID,CO.EXCLUSIONS,CO.EXTRAS,PR.TOPPINGS
     FROM CUSTOMER_ORDERS AS CO
      JOIN PIZZA_RECIPES AS PR
      ON PR.PIZZA_ID=CO.PIZZA_ID
	  JOIN RUNNER_ORDERS AS RN
	  ON RN.ORDER_ID=CO.ORDER_ID
	  WHERE RN.CANCELLATION IS NULL
	   ),
CTE2 AS( /* SUBTRACTION */
     SELECT ORDER_ID,
      CASE WHEN EXCLUSIONS IS NOT NULL THEN 
       (SELECT ARRAY(
            SELECT DISTINCT UNNEST(string_to_array(TOPPINGS, ','))::int
            EXCEPT
            SELECT DISTINCT UNNEST(string_to_array(EXCLUSIONS, ','))::int
             ) )
          ELSE (SELECT ARRAY(SELECT UNNEST(STRING_TO_ARRAY(TOPPINGS,','))::INT))
      END AS SUB
     FROM CTE
       ),	
CTE3 AS(  /* ADDITION  */
     SELECT ORDER_ID,
     UNNEST(SUB) AS FINAL_I
     FROM CTE2
      UNION ALL
     SELECT ORDER_ID, 
     UNNEST(STRING_TO_ARRAY(EXTRAS,','))::INT AS FINAL_I
     FROM CTE
	  )
     SELECT TOPPING_NAME,
      COUNT(FINAL_I) AS FINAL_COUNT
     FROM CTE3
	 INNER JOIN PIZZA_TOPPINGS AS PT
	 ON PT.TOPPING_ID=CTE3.FINAL_I
      GROUP BY TOPPING_NAME
     ORDER BY TOPPING_NAME
      
